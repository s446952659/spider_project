# -*- coding: utf-8 -*-
import scrapy
import pandas as pd
import datetime
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from pydispatch import dispatcher
from scrapy import signals
from Astock.items import BasicDataItem


class BasicDataSpider(scrapy.Spider):
    name = 'BasicData'
    allowed_domains = ['stockpage.10jqka.com.cn']
    start_urls = ['http://stockpage.10jqka.com.cn/realHead_v2.html#hs_000001']
    chrome_options = Options()
    chrome_options.add_argument('--headless')

    def __init__(self):
        super(BasicDataSpider, self).__init__()
        self.driver = webdriver.Chrome(options=self.chrome_options)
        self.crawl_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        self.A_stocks = pd.read_excel('Astock/spiders/data_source_th/Astocks.xlsx', dtype={'code': str, 'market': str})
        dispatcher.connect(self.closeSpider,signals.spider_closed)

    def closeSpider(self):
        self.driver.quit()

    def parse(self, response):
        for i in self.A_stocks.index:
            stock_code = self.A_stocks['code'][i]
            stock_market = self.A_stocks['market'][i]
            stock_name = self.A_stocks['name'][i]
            url = 'http://stockpage.10jqka.com.cn/realHead_v2.html#hs_%s'%stock_code
            yield scrapy.Request(url=url,callback=self.parse_next,dont_filter=True,
                                meta={"info":(stock_code,stock_market,stock_name)})

    def parse_next(self,response):
        stock_code,stock_market,stock_name = response.meta.get('info')
        spans = response.xpath("//ul[contains(@class,'new_trading fl')]//span")
        trange = spans.xpath(".//strong[@id='trange']//text()").get()  # 振幅
        tchange = spans.xpath(".//strong[@id='tchange']//text()").get()  # 换手
        tvalue = spans.xpath(".//strong[@id='tvalue']//text()").get()
        tvalue_unit = spans.xpath(".//strong[@id='tvalue']/../text()").getall()[-1]
        tvalue = tvalue + tvalue_unit#总市值
        tvaluep = spans.xpath(".//strong[@id='tvaluep']//text()").get()  # 市净率
        flowvalue = spans.xpath(".//strong[@id='flowvalue']//text()").get()
        flowvalue_unit = spans.xpath(".//strong[@id='flowvalue']/../text()").getall()[-1]
        flowvalue = flowvalue + flowvalue_unit# 流通市值
        fvaluep = spans.xpath(".//strong[@id='fvaluep']//text()").get()  # 市赢率（动）
        item = BasicDataItem(stock_code=stock_code, stock_market=stock_market, stock_name=stock_name,
                              trange=trange,tchange=tchange,tvalue=tvalue,tvaluep=tvaluep,
                              flowvalue=flowvalue,fvaluep=fvaluep,crawl_time=self.crawl_time)
        yield item


